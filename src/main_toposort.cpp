#include <iostream>
#include <omp.h>

#include "graph.hpp"
#define ENABLE_ANALYSIS 1
#include "graph.analysis.hpp" // exact copy of graph.hpp auto-generated by makefile
#include "rdtsc_timer.hpp"


int main() {
#ifndef NDEBUG
    std::cout << "THIS IS THE DEBUG MODE" << std::endl;

    #pragma omp parallel
    #pragma omp master
    std::cout << "Number of threads: " << omp_get_num_threads() << std::endl;
#endif
	util::rdtsc_timer t;

	// Initializing graph
	Graph testgraph_paper(9);
	testgraph_paper.connect(Graph::PAPER); // Constructing graph from paper
	testgraph_paper.topSort();
	testgraph_paper.checkCorrect(true);
	testgraph_paper.printNodeInfo();
	testgraph_paper.viz("paper");
    testgraph_paper.printSolution();
	
	unsigned const N = 5000;
	// Initializing graph with random edges
	Graph testgraph_random(N);
	testgraph_random.connect(Graph::RANDOM_EDGES, 0.05);

	t.start();
	testgraph_random.topSort();
	t.stop();

    double t_total = t.sec();
	testgraph_random.checkCorrect(false);
	
	// Initializing graph with random edges, with analysis
	GraphAnalysis testgraph_random2(N);
	testgraph_random2.connect(Graph::RANDOM_EDGES, 0.05);
    
    t.start();
	testgraph_random2.topSort();
    t.stop();
	testgraph_random2.checkCorrect(false);
	// TODO: discuss if this makes sense
    // testgraph_random2.analysis_.t_total = t_total;
    // testgraph_random2.analysis_.t_timing_overhead = t.sec() - t_total;
    // testgraph_random2.analysis_.summary(std::cout);
	return 0;

}
